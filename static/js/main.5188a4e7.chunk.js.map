{"version":3,"sources":["redux/first/first.types.js","redux/second/second.types.js","components/action-card.component.jsx","redux/first/first.actions.js","redux/second/second.actions.js","components/rerender-count-card.component.jsx","components/store-card.component.jsx","redux/first/first.selectors.js","redux/second/second.selectors.js","components/info-card.component.jsx","App.js","reportWebVitals.js","redux/first/first.reducer.js","redux/second/second.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["FirstActionTypes","SecondActionTypes","connect","dispatch","increaseFirstCounter","value","type","payload","decreaseFirstCounter","increaseSecondCounter","decreaseSecondCounter","useState","inputValue","setInputValue","statePortion","setStatePortion","increaseCounter","decreaseCounter","onChangeStateHandler","event","target","Grid","divided","Column","as","Card","Content","Header","Description","width","Button","Group","fluid","active","onClick","Input","onChange","placeholder","extra","positive","negative","Divider","RenderCountCard","renderCount","useRef","current","textAlign","Statistic","color","size","Value","state","props","Row","columns","first","counter","Label","second","JSON","stringify","style","alignSelf","selectFirstCounter","createSelector","selectSecondCounter","console","log","portion","App","padding","Container","centered","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","rootReducer","combineReducers","action","Number","middlewares","logger","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5188a4e7.chunk.js","sourcesContent":["export const FirstActionTypes = {\r\n  INCREASE_1ST_COUNTER: \"INCREASE_1ST_COUNTER\",\r\n  DECREASE_1ST_COUNTER: \"DECREASE_1ST_COUNTER\",\r\n};\r\n","export const SecondActionTypes = {\r\n  INCREASE_2ND_COUNTER: \"INCREASE_2ND_COUNTER\",\r\n  DECREASE_2ND_COUNTER: \"DECREASE_2ND_COUNTER\",\r\n};\r\n","import { connect } from \"react-redux\";\r\nimport { Button, Card, Input, Grid, Divider } from \"semantic-ui-react\";\r\nimport { useState } from \"react\";\r\n\r\nimport {\r\n  increaseFirstCounter,\r\n  decreaseFirstCounter,\r\n} from \"../redux/first/first.actions\";\r\n\r\nimport {\r\n  increaseSecondCounter,\r\n  decreaseSecondCounter,\r\n} from \"../redux/second/second.actions\";\r\n\r\nconst ActionCard = ({\r\n  increaseFirstCounter,\r\n  decreaseFirstCounter,\r\n  increaseSecondCounter,\r\n  decreaseSecondCounter,\r\n}) => {\r\n  const [inputValue, setInputValue] = useState(1);\r\n\r\n  const [statePortion, setStatePortion] = useState(\"first\");\r\n\r\n  const increaseCounter =\r\n    statePortion === \"first\" ? increaseFirstCounter : increaseSecondCounter;\r\n\r\n  const decreaseCounter =\r\n    statePortion === \"first\" ? decreaseFirstCounter : decreaseSecondCounter;\r\n\r\n  const onChangeStateHandler = (event) => {\r\n    setStatePortion(event.target.value);\r\n  };\r\n\r\n  const onChangeInputHandler = (event) => {\r\n    setInputValue(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <Grid divided>\r\n      <Grid.Column as={Card}>\r\n        <Card.Content>\r\n          <Card.Header>Action Card / Manipulate A State Portion</Card.Header>\r\n        </Card.Content>\r\n        <Card.Content>\r\n          <Card.Description>\r\n            <Grid>\r\n              <Grid.Column width={6}>\r\n                <Button.Group fluid>\r\n                  <Button\r\n                    active={statePortion === \"first\"}\r\n                    value=\"first\"\r\n                    onClick={onChangeStateHandler}\r\n                  >\r\n                    First\r\n                  </Button>\r\n                  <Button\r\n                    active={statePortion === \"second\"}\r\n                    value=\"second\"\r\n                    onClick={onChangeStateHandler}\r\n                  >\r\n                    Second\r\n                  </Button>\r\n                </Button.Group>\r\n              </Grid.Column>\r\n              <Grid.Column width={10}>\r\n                <Input\r\n                  onChange={onChangeInputHandler}\r\n                  value={inputValue}\r\n                  fluid\r\n                  placeholder=\"Enter value\"\r\n                />\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Card.Description>\r\n        </Card.Content>\r\n        <Card.Content extra>\r\n          <Button.Group fluid>\r\n            <Button positive onClick={() => increaseCounter(inputValue)}>\r\n              Increase\r\n            </Button>\r\n            <Button negative onClick={() => decreaseCounter(inputValue)}>\r\n              Decrease\r\n            </Button>\r\n          </Button.Group>\r\n        </Card.Content>\r\n        <Divider />\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  increaseFirstCounter: (value) => dispatch(increaseFirstCounter(value)),\r\n  decreaseFirstCounter: (value) => dispatch(decreaseFirstCounter(value)),\r\n  increaseSecondCounter: (value) => dispatch(increaseSecondCounter(value)),\r\n  decreaseSecondCounter: (value) => dispatch(decreaseSecondCounter(value)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ActionCard);\r\n","import { FirstActionTypes } from \"./first.types\";\r\n\r\nexport const increaseFirstCounter = (value) => ({\r\n  type: FirstActionTypes.INCREASE_1ST_COUNTER,\r\n  payload: value,\r\n});\r\n\r\nexport const decreaseFirstCounter = (value) => ({\r\n  type: FirstActionTypes.DECREASE_1ST_COUNTER,\r\n  payload: value,\r\n});\r\n","import { SecondActionTypes } from \"./second.types\";\r\n\r\nexport const increaseSecondCounter = (value) => ({\r\n  type: SecondActionTypes.INCREASE_2ND_COUNTER,\r\n  payload: value,\r\n});\r\n\r\nexport const decreaseSecondCounter = (value) => ({\r\n  type: SecondActionTypes.DECREASE_2ND_COUNTER,\r\n  payload: value,\r\n});\r\n","import { Card, Statistic, Grid } from \"semantic-ui-react\";\r\nimport { useRef } from \"react\";\r\n\r\nconst RenderCountCard = () => {\r\n  const renderCount = useRef(-1);\r\n  renderCount.current = renderCount.current + 1;\r\n\r\n  return (\r\n    <Grid divided>\r\n      <Grid.Column as={Card} textAlign=\"center\">\r\n        <Card.Content>\r\n          <Card.Header>Rerender Count</Card.Header>\r\n\r\n          <Statistic color=\"green\" size=\"huge\">\r\n            <Statistic.Value>{renderCount.current}</Statistic.Value>\r\n          </Statistic>\r\n        </Card.Content>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default RenderCountCard;\r\n","import { connect } from \"react-redux\";\r\nimport { Card, Statistic, Grid, Divider } from \"semantic-ui-react\";\r\n\r\nimport RenderCountCard from \"./rerender-count-card.component\";\r\n\r\nconst InfoCardStore = (props) => {\r\n  return (\r\n    <>\r\n      <Grid divided>\r\n        <Grid.Column as={Card} width={12}>\r\n          <Card.Content>\r\n            <Card.Header>Store Card / Global State (Store)</Card.Header>\r\n          </Card.Content>\r\n          <Card.Content textAlign=\"center\">\r\n            <Card.Description as={Grid}>\r\n              <Grid.Row columns={2}>\r\n                <Grid.Column>\r\n                  <Statistic color=\"red\">\r\n                    <Statistic.Value>{props.first.counter}</Statistic.Value>\r\n                    <Statistic.Label>First Portion Counter</Statistic.Label>\r\n                  </Statistic>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                  <Statistic color=\"blue\">\r\n                    <Statistic.Value>{props.second.counter}</Statistic.Value>\r\n                    <Statistic.Label>Second Portion Counter</Statistic.Label>\r\n                  </Statistic>\r\n                </Grid.Column>\r\n              </Grid.Row>\r\n            </Card.Description>\r\n          </Card.Content>\r\n          <Card.Content textAlign=\"center\">\r\n            <Card.Description>\r\n              <pre> State: {JSON.stringify(props)}</pre>\r\n            </Card.Description>\r\n          </Card.Content>\r\n        </Grid.Column>\r\n        <Grid.Column style={{ alignSelf: \"center\" }} width={4}>\r\n          <RenderCountCard />\r\n        </Grid.Column>\r\n      </Grid>\r\n      <Divider />\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return state;\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(InfoCardStore);\r\n","import { createSelector } from \"reselect\";\r\n\r\nconst selectFirst = (state) => state.first;\r\n\r\nexport const selectFirstCounter = createSelector(\r\n  [selectFirst],\r\n  (first) => first.counter\r\n);\r\n","import { createSelector } from \"reselect\";\r\n\r\nconst selectSecond = (state) => state.second;\r\n\r\nexport const selectSecondCounter = createSelector([selectSecond], (second) => {\r\n  if (-13579 !== second.counter) {\r\n    console.log(\"With Selector\");\r\n  }\r\n  return second.counter;\r\n});\r\n","import { connect } from \"react-redux\";\r\nimport { Card, Statistic, Grid, Divider } from \"semantic-ui-react\";\r\nimport { useRef } from \"react\";\r\n\r\nimport RenderCountCard from \"./rerender-count-card.component\";\r\n\r\nimport { selectFirstCounter } from \"../redux/first/first.selectors\";\r\nimport { selectSecondCounter } from \"../redux/second/second.selectors\";\r\n\r\nconst InfoCardWSelector = (props) => {\r\n  const renderCount = useRef(0);\r\n  renderCount.current = renderCount.current + 1;\r\n\r\n  console.log(props);\r\n\r\n  const { portion, counter } = props;\r\n\r\n  return (\r\n    <>\r\n      <Grid divided>\r\n        <Grid.Column width={12} as={Card}>\r\n          <Card.Content>\r\n            <Card.Header>\r\n              Info Card / {portion === \"first\" ? \"First\" : \"Second\"} State\r\n              Portion Counter\r\n            </Card.Header>\r\n          </Card.Content>\r\n          <Card.Content>\r\n            <Card.Description as={Grid} textAlign=\"center\">\r\n              <Grid.Column>\r\n                <Statistic color={portion === \"first\" ? \"red\" : \"blue\"}>\r\n                  <Statistic.Value>{counter}</Statistic.Value>\r\n                  <Statistic.Label>\r\n                    {portion === \"first\"\r\n                      ? \"First Portion Counter\"\r\n                      : \"Second Portion Counter\"}\r\n                  </Statistic.Label>\r\n                </Statistic>\r\n              </Grid.Column>\r\n            </Card.Description>\r\n          </Card.Content>\r\n          <Card.Content textAlign=\"center\">\r\n            <Card.Description>\r\n              <pre> Props: {JSON.stringify(props)}</pre>\r\n            </Card.Description>\r\n          </Card.Content>\r\n        </Grid.Column>\r\n        <Grid.Column width={4} style={{ alignSelf: \"center\" }}>\r\n          <RenderCountCard />\r\n        </Grid.Column>\r\n      </Grid>\r\n      <Divider />\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, props) => {\r\n  const counter =\r\n    props.portion === \"first\"\r\n      ? selectFirstCounter(state)\r\n      : selectSecondCounter(state);\r\n  return { counter };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(InfoCardWSelector);\r\n","import { Card, Grid, Header, Container } from \"semantic-ui-react\";\nimport ActionCard from \"./components/action-card.component\";\nimport InfoCardStore from \"./components/store-card.component\";\nimport InfoCardWSelector from \"./components/info-card.component\";\n\nfunction App() {\n  return (\n    <Card.Content\n      style={{\n        padding: \"3rem\",\n      }}\n      fluid\n      textAlign=\"center\"\n      as={Container}\n    >\n      <Header size=\"large\">React / Redux & Selectors Example</Header>\n      <br />\n      <br />\n\n      <Grid divided centered columns={2}>\n        <Grid.Column>\n          <InfoCardStore />\n\n          <ActionCard />\n        </Grid.Column>\n        <Grid.Column>\n          <InfoCardWSelector portion=\"first\" />\n\n          <InfoCardWSelector portion=\"second\" />\n        </Grid.Column>\n      </Grid>\n    </Card.Content>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { FirstActionTypes } from \"./first.types\";\r\n\r\nconst INITIAL_STATE = {\r\n  counter: 1,\r\n};\r\n\r\nexport const firstReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case FirstActionTypes.INCREASE_1ST_COUNTER:\r\n      return { ...state, counter: state.counter + Number(action.payload) };\r\n    case FirstActionTypes.DECREASE_1ST_COUNTER:\r\n      return { ...state, counter: state.counter - Number(action.payload) };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { SecondActionTypes } from \"./second.types\";\r\n\r\nconst INITIAL_STATE = {\r\n  counter: 1000,\r\n};\r\n\r\nexport const secondReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case SecondActionTypes.INCREASE_2ND_COUNTER:\r\n      return { ...state, counter: state.counter + Number(action.payload) };\r\n    case SecondActionTypes.DECREASE_2ND_COUNTER:\r\n      return { ...state, counter: state.counter - Number(action.payload) };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { firstReducer } from \"./first/first.reducer\";\r\nimport { secondReducer } from \"./second/second.reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  first: firstReducer,\r\n  second: secondReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport logger from \"redux-logger\";\r\n\r\nimport rootReducer from \"./root-reducer\";\r\n\r\nconst middlewares = [logger];\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}